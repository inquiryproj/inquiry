// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// APIKeyRepository is an autogenerated mock type for the APIKeyRepository type
type APIKeyRepository struct {
	mock.Mock
}

// Validate provides a mock function with given fields: ctx, key
func (_m *APIKeyRepository) Validate(ctx context.Context, key string) (uuid.UUID, error) {
	ret := _m.Called(ctx, key)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPIKeyRepository creates a new instance of APIKeyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIKeyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIKeyRepository {
	mock := &APIKeyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
