// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	app "github.com/inquiryproj/inquiry/internal/app"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// ListRunsForProject provides a mock function with given fields: ctx, listRunsForProjectRequest
func (_m *Runner) ListRunsForProject(ctx context.Context, listRunsForProjectRequest *app.ListRunsForProjectRequest) (*app.ListRunsForProjectResponse, error) {
	ret := _m.Called(ctx, listRunsForProjectRequest)

	var r0 *app.ListRunsForProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *app.ListRunsForProjectRequest) (*app.ListRunsForProjectResponse, error)); ok {
		return rf(ctx, listRunsForProjectRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *app.ListRunsForProjectRequest) *app.ListRunsForProjectResponse); ok {
		r0 = rf(ctx, listRunsForProjectRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.ListRunsForProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *app.ListRunsForProjectRequest) error); ok {
		r1 = rf(ctx, listRunsForProjectRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunProject provides a mock function with given fields: ctx, run
func (_m *Runner) RunProject(ctx context.Context, run *app.RunProjectRequest) (*app.ProjectRunOutput, error) {
	ret := _m.Called(ctx, run)

	var r0 *app.ProjectRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *app.RunProjectRequest) (*app.ProjectRunOutput, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *app.RunProjectRequest) *app.ProjectRunOutput); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.ProjectRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *app.RunProjectRequest) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunProjectByName provides a mock function with given fields: ctx, run
func (_m *Runner) RunProjectByName(ctx context.Context, run *app.RunProjectByNameRequest) (*app.ProjectRunOutput, error) {
	ret := _m.Called(ctx, run)

	var r0 *app.ProjectRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *app.RunProjectByNameRequest) (*app.ProjectRunOutput, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *app.RunProjectByNameRequest) *app.ProjectRunOutput); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.ProjectRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *app.RunProjectByNameRequest) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Runner {
	mock := &Runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
