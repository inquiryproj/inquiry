// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	domain "github.com/inquiryproj/inquiry/internal/repository/domain"
)

// Scenario is an autogenerated mock type for the Scenario type
type Scenario struct {
	mock.Mock
}

// CreateScenario provides a mock function with given fields: ctx, scenario
func (_m *Scenario) CreateScenario(ctx context.Context, scenario *domain.CreateScenarioRequest) (*domain.Scenario, error) {
	ret := _m.Called(ctx, scenario)

	var r0 *domain.Scenario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateScenarioRequest) (*domain.Scenario, error)); ok {
		return rf(ctx, scenario)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateScenarioRequest) *domain.Scenario); ok {
		r0 = rf(ctx, scenario)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Scenario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateScenarioRequest) error); ok {
		r1 = rf(ctx, scenario)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForProject provides a mock function with given fields: ctx, getForProjectRequest
func (_m *Scenario) GetForProject(ctx context.Context, getForProjectRequest *domain.GetScenariosForProjectRequest) ([]*domain.Scenario, error) {
	ret := _m.Called(ctx, getForProjectRequest)

	var r0 []*domain.Scenario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetScenariosForProjectRequest) ([]*domain.Scenario, error)); ok {
		return rf(ctx, getForProjectRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetScenariosForProjectRequest) []*domain.Scenario); ok {
		r0 = rf(ctx, getForProjectRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Scenario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetScenariosForProjectRequest) error); ok {
		r1 = rf(ctx, getForProjectRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScenario creates a new instance of Scenario. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScenario(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scenario {
	mock := &Scenario{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
