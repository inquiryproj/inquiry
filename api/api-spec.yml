openapi: 3.0.0
servers:
  - url: http://localhost:3000
info:
  title: Inquiry Server
  description: The Inquiry Server API
  version: 0.0.1
  contact:
    name: Inquiry
    url: "https://github.com/inquiryproj/inquiry"
    email: "wim_spaargaren@live.nl"
tags:
  - name: projects
    description: API endpoints for managing projects
  - name: scenarios
    description: API endpoints for managing scenarios
  - name: run
    description: Run endpoints
  - name: create
    description: Create endpoints
  - name: list
    description: List endpoints
components:
  securitySchemes:
    ApiKeyAuth:        
      type: apiKey
      in: header       
      name: Authorization
  schemas:
    Project:
      type: object
      required:
        - id
        - name
      properties:
        id:
          x-go-type: uuid.UUID
          x-go-name: ID
          x-go-type-import:
            path: github.com/google/uuid
        name: 
          type: string
    ProjectArray:
      type: array
      items:
        $ref: '#/components/schemas/Project'
    ScenarioCreateRequest:
      type: object
      required:
        - name
        - spec_type
        - spec
      properties:
        name: 
          type: string
        spec_type: 
          type: string
        spec: 
          type: string
    Scenario:
      type: object
      required:
        - id
        - name
        - spec_type
        - spec
        - project_id
      properties:
        id:
          x-go-type: uuid.UUID
          x-go-name: ID
          x-go-type-import:
            path: github.com/google/uuid
        name: 
          type: string
        spec_type: 
          type: string
        spec: 
          type: string
        project_id:
          x-go-type: uuid.UUID
          x-go-name: ProjectID
          x-go-type-import:
            path: github.com/google/uuid
    ProjectRunOutput:
      type: object
      required:
        - id
        - project_id
        - success
        - state
        - scenario_run_details
      properties:
        id:
          x-go-type: uuid.UUID
          x-go-name: ID
          x-go-type-import:
            path: github.com/google/uuid
        project_id:
          x-go-type: uuid.UUID 
          x-go-name: ProjectID
          x-go-type-import:
            path: github.com/google/uuid
        success: 
          type: boolean
        state:
          type: string
          enum: [pending, running, success, failure, cancelled]
        scenario_run_details:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioRunDetails'
    ProjectRunOutputArray:
      type: array
      items:
        $ref: '#/components/schemas/ProjectRunOutput'
    ScenarioRunDetails:
      type: object
      required:
        - name
        - duration_in_ms
        - assertions
        - success
        - steps
      properties:
        name:
          type: string
        duration_in_ms:
          type: integer
        assertions:
          type: integer
        success:
          type: boolean
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepRunDetails'
    StepRunDetails:
      type: object
      required:
        - name
        - assertions
        - url
        - request_duration_in_ms
        - duration_in_ms
        - retries
        - success
      properties:
        name:
          type: string
        assertions:
          type: integer
        url:
          type: string
          x-go-name: URL
        request_duration_in_ms:
          type: integer
        duration_in_ms:
          type: integer
        retries:
          type: integer
        success:
          type: boolean
        
    ErrMsg:
      type: object
      required:
        - message
      properties:
        message:
          type: string
security:
  - ApiKeyAuth: []
paths:
  "/v1/projects":
    description: API endpoints for managing projects
    post:
      description: Creates a project
      operationId: createProject
      tags:
        - projects
        - create
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/Project"
      responses: 
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
          description: The project was successfully created.
        default:
          description: Unable to create project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrMsg"
    get:
      description: Lists all projects
      operationId: listProjects
      tags:
        - projects
        - list
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
          description: The number of projects to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: The number of projects to skip
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectArray"
          description: List of projects.
        default:
          description: Unable to list projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrMsg"
  "/v1/projects/{id}/scenarios":
    post:
      description: Creates a scenario
      operationId: createScenario
      tags:
        - scenarios
        - create
      parameters:
        - in: path
          name: id
          schema:
            type: string
            x-go-type: uuid.UUID
            x-go-name: ID
            x-go-type-import:
              path: github.com/google/uuid
          required: true
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/ScenarioCreateRequest"
      responses: 
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scenario"
          description: The scenario was successfully created.
        default:
          description: Unable to create scenario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrMsg"
  "/v1/projects/{id}/run":
    post:
      description: Runs all scenarios for a given project
      operationId: runProject
      tags:
        - projects
        - run
      parameters:
        - in: path
          name: id
          schema:
            type: string
            x-go-type: uuid.UUID
            x-go-name: ID
            x-go-type-import:
              path: github.com/google/uuid
          required: true
      responses: 
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectRunOutput"
          description: The scenarios for the project ran successfully.
        default:
          description: Something went wrong while running the scenarios
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrMsg"
  "/v1/projects/{name}/run-by-name":
    post:
      description: Runs all scenarios for a given project with a given name
      operationId: runProjectByName
      tags:
        - projects
        - run
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses: 
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectRunOutput"
          description: The scenarios for the project ran successfully.
        default:
          description: Something went wrong while running the scenarios
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrMsg"
  "/v1/projects/{id}/runs":
    get:
      description: Retrieves all runs for a given project
      operationId: getRunsForProject
      tags:
        - projects
        - run
      parameters:
        - in: path
          name: id
          schema:
            type: string
            x-go-type: uuid.UUID
            x-go-name: ID
            x-go-type-import:
              path: github.com/google/uuid
          required: true
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
          description: The number of runs to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: The number of runs to skip
      responses: 
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectRunOutputArray"
          description: Runs for a given project.
        default:
          description: Something went wrong while retrieving the runs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrMsg"
